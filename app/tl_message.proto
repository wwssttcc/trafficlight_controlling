// A very simple protocol definition, consisting of only
// one message.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package tflightPackage;

enum MsgType { 
	tflightPBType = 0; 
	CXSSCtrlInfoType = 1; 
	TFLightCtrlInfoType = 2;
	ServCtrlInfoType = 3;
} 

message BaseMsg{ 
	required MsgType msg_type = 1; 
} 

message TFmessage {
    required uint32 stage = 1;
    required uint32 state = 2;
    required uint32 time = 3;
    required uint32 nextstate = 4;
    required uint32 nexttime = 5;
    required uint32 r_period = 6;
    required uint32 g_period = 7;
    required uint32 y_period = 8;  	
}

message tflightPB {
	required MsgType msg_type = 1; 
    repeated TFmessage TF = 2;
}

message CXSSCtrlInfo {
	required MsgType msg_type = 1; 
	required bool vehicle_priority_enable = 2;
	required uint32 priority_rule  = 3;
	required uint32 curr_vehicle_phase = 4;
	optional uint32 green_extend_time = 5;
	required bool vehicle_passed_flag = 6;
	required uint32 dst_status = 7;
	required uint32 next_green_time = 8;
	optional uint32 curr_green_time = 9;
}

message TFLightCtrlInfo {
	required MsgType msg_type = 1; 
	required uint32 curr_light_phase = 2;
	required uint32 curr_light_state = 3;
	required uint32 curr_run_time = 4;
	required bool priority_ctrl_ongoing = 5;
}

message ServCtrlInfo {
	required MsgType msg_type = 1; 
	required uint32 mode  = 2;					//normal, TSP, DST
	required uint32 priority_rule  = 3;			//优先相应机制
	required uint32 curr_vehicle_phase = 4;		//当前优先对应相位值
	optional uint32 green_extend_time = 5;		//绿灯延长需要的时间
	optional uint32 restore_phase = 6;			//恢复的相位值
}
